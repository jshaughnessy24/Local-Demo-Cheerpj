var Inches, Degrees, x, y, Ticks, fieldSetup, XValues, YValue;

function mathRandomInt(a, b) {
  if (a > b) {
    // Swap a and b to ensure a is smaller.
    var c = a;
    a = b;
    b = c;
  }
  return Math.floor(Math.random() * (b - a + 1) + a);
}

// This function is executed when this Op Mode is selected.
async function runOpMode() {
  fieldSetup = mathRandomInt(0, 2);
  telemetry.addData('fieldSetup', fieldSetup);
  telemetry.update();
  motor.setProperty([1], 'Direction', ["REVERSE"]);
  motor.setProperty([3], 'Direction', ["REVERSE"]);
  motor.setProperty([0, 1, 2, 3], 'Mode', ["STOP_AND_RESET_ENCODER", "STOP_AND_RESET_ENCODER", "STOP_AND_RESET_ENCODER", "STOP_AND_RESET_ENCODER"]);
  motor.setProperty([0, 1, 2, 3], 'TargetPositionTolerance', [50, 50, 50, 50]);
  motor.setProperty([0, 1, 2, 3], 'TargetPosition', [0, 0, 0, 0]);
  motor.setProperty([0, 1, 2, 3], 'Mode', ["RUN_TO_POSITION", "RUN_TO_POSITION", "RUN_TO_POSITION", "RUN_TO_POSITION"]);
  await linearOpMode.waitForStart();
  if (linearOpMode.opModeIsActive()) {
    motor.setProperty([7], 'Power', [1]);
    await Forward(75);
    await GoToPosition(15 - Math.abs(fieldSetup - 1) * 30, 70 + fieldSetup * 30);
    motor.setProperty([7], 'Power', [0]);
    await linearOpMode.sleep(250);
    motor.setProperty([6], 'Power', [0.9]);
    XValues = [47, 51.35, 68];
    YValue = 50;
    if (fieldSetup == 2) {
      YValue = 37;
    }
    await GoToPosition(XValues[((fieldSetup + 1) - 1)], YValue);
    await linearOpMode.sleep(250);
    for (var count = 0; count < 3; count++) {
      motor.setProperty([5], 'Power', [1]);
      await linearOpMode.sleep(250);
      motor.setProperty([5], 'Power', [0]);
      await Strafe(12);
      motor.setProperty([6], 'Power', [0.91]);
      await linearOpMode.sleep(750);
      await linearOpMode.sleep(1);
    }
    await Forward(20);
  }
}

// Describe this function...
async function InchesToTicks(Inches) {
  Ticks = (Inches / (4 * Math.PI)) * 560;
  return Ticks;
}

// Describe this function...
async function Forward(Inches) {
  Ticks = await InchesToTicks(Inches);
  motor.setProperty([0, 1, 2, 3], 'TargetPosition', [motor.getProperty(0, 'TargetPosition') + Ticks, motor.getProperty(1, 'TargetPosition') + Ticks, motor.getProperty(2, 'TargetPosition') + Ticks, motor.getProperty(3, 'TargetPosition') + Ticks]);
  motor.setProperty([0, 1, 2, 3], 'Power', [0.85, 0.85, 0.85, 0.85]);
  while (motor.isBusy(0) || motor.isBusy(1)) {
    await linearOpMode.sleep(1);
  }
  motor.setProperty([0, 1, 2, 3], 'Power', [0, 0, 0, 0]);
}

// Describe this function...
async function Strafe(Inches) {
  Ticks = await InchesToTicks(Inches);
  motor.setProperty([0, 1, 2, 3], 'TargetPosition', [motor.getProperty(0, 'TargetPosition') + Ticks, motor.getProperty(1, 'TargetPosition') - Ticks, motor.getProperty(2, 'TargetPosition') - Ticks, motor.getProperty(3, 'TargetPosition') + Ticks]);
  motor.setProperty([0, 1, 2, 3], 'Power', [0.85, 0.85, 0.85, 0.85]);
  while (motor.isBusy(0) || motor.isBusy(1)) {
    await linearOpMode.sleep(1);
  }
  motor.setProperty([0, 1, 2, 3], 'Power', [0, 0, 0, 0]);
}

// Describe this function...
async function Rotate(Degrees) {
  motor.setProperty([0, 1, 2, 3], 'Mode', ["RUN_USING_ENCODER", "RUN_USING_ENCODER", "RUN_USING_ENCODER", "RUN_USING_ENCODER"]);
  motor.setProperty([0, 1, 2, 3], 'Power', [-0.85 * Math.min(Math.max(Degrees, -1), 1), 0.85 * Math.min(Math.max(Degrees, -1), 1), -0.85 * Math.min(Math.max(Degrees, -1), 1), 0.85 * Math.min(Math.max(Degrees, -1), 1)]);
  await linearOpMode.sleep((Degrees / 90) * 350);
  motor.setProperty([0, 1, 2, 3], 'Power', [0, 0, 0, 0]);
  motor.setProperty([0, 1, 2, 3], 'TargetPosition', [motor.getProperty(0, 'CurrentPosition'), motor.getProperty(1, 'CurrentPosition'), motor.getProperty(2, 'CurrentPosition'), motor.getProperty(3, 'CurrentPosition')]);
  motor.setProperty([0, 1, 2, 3], 'Mode', ["RUN_TO_POSITION", "RUN_TO_POSITION", "RUN_TO_POSITION", "RUN_TO_POSITION"]);
}

// Describe this function...
async function GoToPosition(x, y) {
  x = await InchesToTicks(x);
  y = await InchesToTicks(y);
  motor.setProperty([0, 1, 2, 3], 'TargetPosition', [y + x, y - x, y - x, y + x]);
  motor.setProperty([0, 1, 2, 3], 'Power', [0.85, 0.85, 0.85, 0.85]);
  while (motor.isBusy(0) || motor.isBusy(1)) {
    await linearOpMode.sleep(1);
  }
  motor.setProperty([0, 1, 2, 3], 'Power', [0, 0, 0, 0]);
}


await runOpMode();